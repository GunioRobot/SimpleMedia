<?php
/**
 * SimpleMedia.
 *
 * @copyright Axel Guckelsberger
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package SimpleMedia
 * @author Axel Guckelsberger <info@guite.de>.
 * @link http://zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.4 (http://modulestudio.de) at Mon Nov 28 12:34:51 CET 2011.
 */

/**
 * Version information base class.
 */
class SimpleMedia_Base_Version extends Zikula_AbstractVersion
{
    public function getMetaData()
    {
        $meta = array();
        // the current module version
        $meta['version']              = '1.0.0';
        // the displayed name of the module
        $meta['displayname']          = $this->__('SimpleMedia');
        // the module description
        $meta['description']          = $this->__('Simple file and media management.');
        //! url version of name, should be in lowercase without space
        $meta['url']                  = $this->__('simplemedia');
        // core requirement
        $meta['core_min']             = '1.3.1'; // requires minimum 1.3.1 or later
        $meta['core_max']             = '1.3.99'; // not ready for 1.4.0 yet

        // define special capabilities of this module
        $meta['capabilities'] = array(
                          HookUtil::SUBSCRIBER_CAPABLE => array('enabled' => true)
/*,
                          HookUtil::PROVIDER_CAPABLE => array('enabled' => true), // TODO: see #15
                          'authentication' => array('version' => '1.0'),
                          'profile'        => array('version' => '1.0', 'anotherkey' => 'anothervalue'),
                          'message'        => array('version' => '1.0', 'anotherkey' => 'anothervalue')
*/
        );

        // permission schema
        // DEBUG: permission schema aspect starts
        $meta['securityschema'] = array(
            'SimpleMedia::' => '::',

            'SimpleMedia:Medium:' => 'MediumID::'
        );
        // DEBUG: permission schema aspect ends



        return $meta;
    }

    /**
     * Define hook subscriber bundles.
     */
    protected function setupHookBundles()
    {

        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.simplemedia.ui_hooks.media', 'ui_hooks', __('simplemedia Media Display Hooks'));
        // Display hook for view/display templates.
        $bundle->addEvent('display_view', 'simplemedia.ui_hooks.media.display_view');
        // Display hook for create/edit forms.
        $bundle->addEvent('form_edit', 'simplemedia.ui_hooks.media.form_edit');
        // Display hook for delete dialogues.
        $bundle->addEvent('form_delete', 'simplemedia.ui_hooks.media.form_delete');
        // Validate input from an ui create/edit form.
        $bundle->addEvent('validate_edit', 'simplemedia.ui_hooks.media.validate_edit');
        // Validate input from an ui create/edit form (generally not used).
        $bundle->addEvent('validate_delete', 'simplemedia.ui_hooks.media.validate_delete');
        // Perform the final update actions for a ui create/edit form.
        $bundle->addEvent('process_edit', 'simplemedia.ui_hooks.media.process_edit');
        // Perform the final delete actions for a ui form.
        $bundle->addEvent('process_delete', 'simplemedia.ui_hooks.media.process_delete');
        $this->registerHookSubscriberBundle($bundle);

        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.simplemedia.filter_hooks.media', 'filter_hooks', __('simplemedia Media Filter Hooks'));
        // A filter applied to the given area.
        $bundle->addEvent('filter', 'simplemedia.filter_hooks.media.filter');
        $this->registerHookSubscriberBundle($bundle);


    }
}

