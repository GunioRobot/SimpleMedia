<?php
/**
 * SimpleMedia.
 *
 * @copyright Axel Guckelsberger
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package SimpleMedia
 * @author Axel Guckelsberger <info@guite.de>.
 * @link http://zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.4 (http://modulestudio.de) at Mon Nov 28 12:34:51 CET 2011.
 */

/**
 * Upload handler implementation class.
 */
class SimpleMedia_UploadHandler extends SimpleMedia_Base_UploadHandler
{
    /**
     * Process a file upload.
     *
     * @param string $objectType Currently treated entity type.
     * @param string $fileData   Form data array.
     * @param string $fieldName  Name of upload field.
     *
     * @return array Resulting file name and collected meta data.
     */
    public function performFileUpload($objectType, $fileData, $fieldName)
    {
        $dom = ZLanguage::getModuleDomain('SimpleMedia');

        $result = array('fileName' => '',
                        'metaData' => array());

        // check whether uploads are allowed for the given object type
        if (!in_array($objectType, $this->allowedObjectTypes)) {
            return $result;
        }

        // perform validation
        if (!$this->validateFileUpload($fileData[$fieldName])) {
            // skip this upload field
            return $result;
        }

        // retrieve the final file name
        $fileName = $fileData[$fieldName]['name'];
        $extensionarr = explode('.', $fileName);
        $extension = strtolower($extensionarr[count($extensionarr) - 1]);

        // retrieve the final file name
        $basePath = SimpleMedia_Util_Controller::getFileBaseFolder($objectType, $fieldName);
        $fileName = $this->determineFileName($objectType, $fieldName, $basePath, $fileName, $extension);


        $destinationFilePath = $basePath . $fileName;

        if (!move_uploaded_file($fileData[$fieldName]['tmp_name'], $destinationFilePath)) {
            return LogUtil::registerError(__('Error! Could not move your file to the destination folder.', $dom));
        }


        $imgInfo = array();
        $isImage = in_array($extension, $this->imageFileTypes);
        if ($isImage && ModUtil::getVar('SimpleMedia', 'enableShrinking', false) == true) {
            // resize to allowed maximum size
            $maxSize = ModUtil::getVar('SimpleMedia', 'shrinkDimensions', null);
            if (is_array($maxSize)
                && isset($maxSize['width']) && $maxSize['width'] > 0
                && isset($maxSize['height']) && $maxSize['height'] > 0
            ) {
                $imgInfo = getimagesize($destinationFilePath);
                if ($imgInfo[0] > $maxSize['width'] || $imgInfo[1] > $maxSize['height']) {
                    // create thumbnail image
                    $thumbFilePath = SimpleMedia_Util_View::getImageThumb($fileName, $destinationFilePath, $maxSize['width'], $maxSize['height']);
                    // remove original image
                    unlink($destinationFilePath);
                    // rename thumbnail image to original image
                    rename($thumbFilePath, $destinationFilePath);
                }
            }
        }


        // collect data to return
        $result['fileName'] = $fileName;
        $result['metaData'] = $this->readMetaDataForFile($fileName, $destinationFilePath);

        return $result;
    }
}
