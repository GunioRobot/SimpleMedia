<?php
/**
 * SimpleMedia.
 *
 * @copyright Axel Guckelsberger
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package SimpleMedia
 * @author Axel Guckelsberger <info@guite.de>.
 * @link http://zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.4 (http://modulestudio.de) at Mon Nov 28 12:34:51 CET 2011.
 */

/**
 * Media selector plugin.
 */
class SimpleMedia_Form_Plugin_MediaSelector extends Zikula_Form_Plugin_TextInput
{
    var $selectedItemId = 0;

    /**
     * Get filename of this file.
     *
     * @return string
     */
    function getFilename()
    {
        return __FILE__;
    }

    /**
     * Create event handler.
     *
     * @param Zikula_Form_View $view    Reference to Zikula_Form_View object.
     * @param array            &$params Parameters passed from the Smarty plugin function.
     *
     * @see    Zikula_Form_AbstractPlugin
     * @return void
     */
    function create(Zikula_Form_View $view, &$params)
    {
        $params['maxLength'] = 11;
/*
        $params['width'] = '8em';
*/
        // let parent plugin do the work in detail
        parent::create($view, $params);
    }

    /**
     * Helper method to determine css class.
     *
     * @see    Zikula_Form_Plugin_TextInput
     *
     * @return string the list of css classes to apply
     */
    protected function getStyleClass()
    {
        $class = parent::getStyleClass();
        return str_replace('z-form-text', 'z-form-media', $class);
    }

    /**
     * Render event handler.
     *
     * @param Zikula_Form_View $view Reference to Zikula_Form_View object.
     *
     * @return string The rendered output
     */
    function render(Zikula_Form_View $view)
    {
        static $firstTime = true;
        if ($firstTime) {
            PageUtil::addVar('javascript', 'prototype');
            PageUtil::addVar('javascript', 'Zikula.UI'); // imageviewer
            PageUtil::addVar('javascript', 'modules/SimpleMedia/javascript/findItem.js');
            PageUtil::addVar('stylesheet', ThemeUtil::getModuleStylesheet('SimpleMedia'));
        }
        $firstTime = false;

        if (!SecurityUtil::checkPermission('SimpleMedia::', "::", ACCESS_COMMENT)) {
            return false;//LogUtil::registerPermissionError();
        }

        $mainCategory = ModUtil::apiFunc('SimpleMedia', 'category', 'getMainCat');
        $catID = (int) FormUtil::getPassedValue('catid', 0, 'POST', FILTER_SANITIZE_INT);
        $onlyImages = (int) FormUtil::getPassedValue('onlyimages', 0, 'POST', FILTER_SANITIZE_INT);
        if ($onlyImages != 0 && $onlyImages != 1) {
            $onlyImages = 0;
        }

        $serviceManager = ServiceUtil::getManager();
        $entityManager = $serviceManager->getService('doctrine.entitymanager');

        $objectType = 'medium';
        $entityClass = 'SimpleMedia_Entity_' . ucfirst($objectType);
        $repository = $entityManager->getRepository($entityClass);

        $sort = $repository->getDefaultSortingField();
        $sdir = 'asc';

        // convenience vars to make code clearer
        $where = '';
        $sortParam = $sort . ' ' . $sdir;

        $objectData = $repository->selectWhere($where, $sortParam);

        $smView = Zikula_View::getInstance('SimpleMedia', false);
        $smView->assign('mainCategory', $mainCategory)
               ->assign('items', $objectData)
               ->assign('selectedId', $this->selectedItemId)
               ->assign('catID', $catID)
               ->assign('onlyImages', $onlyImages);

        return $smView->fetch('external/selectItem.tpl');
    }

    /**
     * Decode event handler.
     *
     * @param Zikula_Form_View $view Zikula_Form_View object.
     *
     * @return void
     */
    function decode(Zikula_Form_View $view)
    {
        parent::decode($view);
        $this->selectedItemId = (int) $this->text;
    }

    /**
     * Parses a value.
     *
     * @param Zikula_Form_View $view Reference to Zikula_Form_View object.
     * @param string           $text Text.
     *
     * @return string Parsed Text.
     */
    function parseValue(Zikula_Form_View $view, $text)
    {
        return $this->selectedItemId;
    }

    /**
     * Load values.
     *
     * Called internally by the plugin itself to load values from the render.
     * Can also by called when some one is calling the render object's Zikula_Form_ViewetValues.
     *
     * @param Zikula_Form_View $view    Reference to Zikula_Form_View object.
     * @param array            &$values Values to load.
     *
     * @return void
     */
    function loadValue(Zikula_Form_View $view, &$values)
    {
        if ($this->dataBased) {
            $value = null;

            if ($this->group == null) {
                if (array_key_exists($this->dataField, $values)) {
                    $value = $values[$this->dataField];
                }
            } else {
                if (array_key_exists($this->group, $values) && array_key_exists($this->dataField, $values[$this->group])) {
                    $value = $values[$this->group][$this->dataField];
                }
            }

            if ($value !== null) {
                //$this->text = $this->formatValue($view, $value);
                $this->selectedItemId = $value;
            }
        }
    }
}
