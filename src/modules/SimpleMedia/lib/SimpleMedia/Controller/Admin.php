<?php
/**
 * SimpleMedia.
 *
 * @copyright Axel Guckelsberger
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package SimpleMedia
 * @author Axel Guckelsberger <info@guite.de>.
 * @link http://zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.4 (http://modulestudio.de) at Mon Nov 28 12:34:51 CET 2011.
 */


/**
 * This is the Admin controller class providing navigation and interaction functionality.
 */
class SimpleMedia_Controller_Admin extends SimpleMedia_Controller_Base_Admin
{
    /**
     * Edit thumbnail image by applying a cropping tool.
     *
     * @param int    id       id of the medium to be modified
     * @param int    thumbnr  thumbnail number: 1..x (optional, default to modvar setting)
     * @param string returnTo keyword specifying the page to return to
     * @return mixed template output or redirect
     */
    public function editthumb($args)
    {
// DEBUG: permission check aspect starts
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('SimpleMedia::', '::', ACCESS_ADMIN));
// DEBUG: permission check aspect ends

        $getData = $this->request->getGet();

        $id = (int) (isset($args['id']) && !empty($args['id'])) ? $args['id'] : $getData->filter('id', 0, FILTER_VALIDATE_INT);
        $thumbnr = (int) (isset($args['thumbnr']) && !empty($args['thumbnr'])) ? $args['thumbnr'] : $getData->filter('thumbnr', 0, FILTER_VALIDATE_INT);
        if (!$thumbnr) {
            $thumbnr = $this->getVar('defaultThumbNumber', 1);
        }
        $returnTo = (isset($args['returnTo']) && !empty($args['returnTo'])) ? $args['returnTo'] : $getData->filter('returnTo', 'adminView', FILTER_SANITIZE_STRING);
        unset($args);

        $objectType = 'medium';
        $entityClass = 'SimpleMedia_Entity_' . ucfirst($objectType);
        $repository = $this->entityManager->getRepository($entityClass);

        $objectTemp = new $entityClass(); 
        $idFields = $objectTemp->get_idFields();
        $idValues = array();

        // retrieve identifier of the object we wish to view
        $idValues = SimpleMedia_Util_Controller::retrieveIdentifier($this->request, $args, $objectType, $idFields);
        $hasIdentifier = SimpleMedia_Util_Controller::isValidIdentifier($idValues);
        $this->throwNotFoundUnless($hasIdentifier, $this->__('Error! Invalid identifier received.'));

        // assign object data fetched from the database
        $objectData = null;
        $objectData = $repository->selectById($idValues);
        if ((!is_array($objectData) && !is_object($objectData)) || !isset($objectData[$idFields[0]])) {
            $this->throwNotFound($this->__('No such item.'));
        }

        if (!$objectData['theFileMeta']['isImage']) {
            $this->throwNotFound($this->__('No such item.'));
        }

        $returnUrl = $this->computeEditThumbReturnUrl($returnTo, $id);

        $useThumbCropper = $this->getVar('useThumbCropper', 0);
        if ($useThumbCropper == 0) {
            LogUtil::registerError($this->__('Thumbnail cropping is not activated.'));
            return System::redirect($returnUrl);
        }

        $thumbDimensions = $this->getVar('thumbDimensions', null);
        if ($thumbDimensions == null) {
            LogUtil::registerError($this->__('Please define some thumbnail dimensions.'));
            return System::redirect(ModUtil::url('SimpleMedia', 'admin', 'config'));
        }
        $thumbDimension = $thumbDimensions[$thumbnr];

        // assign output data to view object.
        $this->view->assign($objectType, $objectData)
                   ->assign('thumbnr', $thumbnr)
                   ->assign('thumbDimension', $thumbDimension)
                   ->assign('returnTo', $returnTo)
                   ->assign('returnUrl', $returnUrl)
                   ->assign('cropSizeMode', $this->getVar('cropSizeMode', SIMPLEMEDIA_CROPPINGMODE_ENFORCED_SIZE_ENFORCED_PROPORTIONS))
                   ->assign($repository->getAdditionalTemplateParameters('controllerAction', $utilArgs));

        // fetch and return the appropriate template
        return SimpleMedia_Util_View::processTemplate($this->view, 'admin', $objectType, 'editThumb', $args);
    }

    private function computeEditThumbReturnUrl($returnTo = 'adminView', $id = 0)
    {
        $type = 'admin';
        $func = 'view';
        $args = array();
        if ($returnTo == 'adminDisplay') {
            $func = 'display';
            $args['id'] = $id;
        } elseif ($returnTo == 'userView') {
            $type = 'user';
        } elseif ($returnTo == 'userDisplay') {
            $type = 'user';
            $func = 'display';
            $args['id'] = $id;
        }
        return ModUtil::url('SimpleMedia', $type, $func, $args);
    }


    /**
     * Recreate a thumbnail following specific parameters
     *
     * @param int    id       id of the medium to be modified
     * @param int    thumbnr  thumbnail number: 1..x (optional, default to modvar setting)
     * @param string returnTo keyword specifying the page to return to
     * @param int    x1       x1 coordinate
     * @param int    y1       y1 coordinate
     * @param int    x2       x2 coordinate
     * @param int    y2       y2 coordinate
     * @param int    width    dimension width
     * @param int    height   dimension height
     */
    function updatethumb($args)
    {
// DEBUG: permission check aspect starts
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('SimpleMedia::', '::', ACCESS_ADMIN));
// DEBUG: permission check aspect ends

        $postData = $this->request->getPost();

        $id = (int) (isset($args['id']) && !empty($args['id'])) ? $args['id'] : $postData->filter('id', 0, FILTER_VALIDATE_INT);
        $thumbnr = (int) (isset($args['thumbnr']) && !empty($args['thumbnr'])) ? $args['thumbnr'] : $postData->filter('thumbnr', 0, FILTER_VALIDATE_INT);
        if (!$thumbnr) {
            $thumbnr = $this->getVar('defaultThumbNumber', 1);
        }
        $returnTo = (isset($args['returnTo']) && !empty($args['returnTo'])) ? $args['returnTo'] : $postData->filter('returnTo', 'adminView', FILTER_SANITIZE_STRING);

        $objectType = 'medium';
        $entityClass = 'SimpleMedia_Entity_' . ucfirst($objectType);
        $repository = $this->entityManager->getRepository($entityClass);

        $objectTemp = new $entityClass(); 
        $idFields = $objectTemp->get_idFields();
        $idValues = array();

        // retrieve identifier of the object we wish to view
        $idValues = SimpleMedia_Util_Controller::retrieveIdentifier($this->request, $args, $objectType, $idFields);
        $hasIdentifier = SimpleMedia_Util_Controller::isValidIdentifier($idValues);
        $this->throwNotFoundUnless($hasIdentifier, $this->__('Error! Invalid identifier received.'));

        // assign object data fetched from the database
        $objectData = null;
        $objectData = $repository->selectById($idValues);
        if ((!is_array($objectData) && !is_object($objectData)) || !isset($objectData[$idFields[0]])) {
            $this->throwNotFound($this->__('No such item.'));
        }

        if (!$objectData['theFileMeta']['isImage']) {
            $this->throwNotFound($this->__('No such item.'));
        }

        $returnUrl = $this->computeEditThumbReturnUrl($returnTo, $id);

        $useThumbCropper = $this->getVar('useThumbCropper', 0);
        if ($useThumbCropper == 0) {
            LogUtil::registerError($this->__('Thumbnail cropping is not activated.'));
            return System::redirect($returnUrl);
        }

        $thumbDimensions = $this->getVar('thumbDimensions', null);
        $thumbDimension = $thumbDimensions[$thumbnr];

        $coords = array();
        $coords['x1']     = (int) (isset($args['x1']) && !empty($args['x1'])) ? $args['x1'] : $postData->filter('x1', 0, FILTER_VALIDATE_INT);
        $coords['y1']     = (int) (isset($args['y1']) && !empty($args['y1'])) ? $args['y1'] : $postData->filter('y1', 0, FILTER_VALIDATE_INT);
        $coords['x2']     = (int) (isset($args['x2']) && !empty($args['x2'])) ? $args['x2'] : $postData->filter('x2', $thumbDimension['width'], FILTER_VALIDATE_INT);
        $coords['y2']     = (int) (isset($args['y2']) && !empty($args['y2'])) ? $args['y2'] : $postData->filter('y2', $thumbDimension['height'], FILTER_VALIDATE_INT);
        $coords['width']  = (int) (isset($args['width']) && !empty($args['width'])) ? $args['width'] : $postData->filter('width', $thumbDimension['width'], FILTER_VALIDATE_INT);
        $coords['height'] = (int) (isset($args['height']) && !empty($args['height'])) ? $args['height'] : $postData->filter('height', $thumbDimension['height'], FILTER_VALIDATE_INT);
        unset($args);


        $basePath = SimpleMedia_Util_Controller::getFileBaseFolder($objectType, 'theFile');
        $fullFileName = $basePath . $objectData['theFile'];

        // compute thumbnail file path using a sub folder
        $pathInfo = pathinfo($fullFileName);
        $mediaThumbDir = ModUtil::getVar('SimpleMedia', 'mediaThumbDir');
        $thumbFilePath = $pathInfo['dirname'] . '/' . $mediaThumbDir . '/' . $pathInfo['filename'] . '_' . $coords['width'] . 'x' . $coords['height'] . '.' . $pathInfo['extension'];

        //if ($coords['width'] == $thumbDimension['width'] && $coords['height'] == $thumbDimension['height']) {
            // delete old thumbnail image if existing
            if (file_exists($thumbFilePath)) {
                @unlink($thumbFilePath);
            }
        //}

        // create new one
        $thumbArgs = array(
            'crop'      => true,
            'x'         => $coords['x1'],
            'y'         => $coords['y1']
        );

        SimpleMedia_Util_Image::getThumb($fullFileName, $coords['width'], $coords['height'], $thumbArgs);

        LogUtil::registerStatus($this->__('Done! The image has been updated. If you still see the old one please refresh your browser cache.'));

        return System::redirect($returnUrl);
    }
}
