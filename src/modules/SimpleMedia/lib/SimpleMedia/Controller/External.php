<?php
/**
 * SimpleMedia.
 *
 * @copyright Axel Guckelsberger
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package SimpleMedia
 * @author Axel Guckelsberger <info@guite.de>.
 * @link http://zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.4 (http://modulestudio.de) at Mon Nov 28 12:34:51 CET 2011.
 */

/**
 * This is the controller class for external calls.
 */
class SimpleMedia_Controller_External extends Zikula_AbstractController
{
    /**
     * Display one file in a separate template.
     *
     * @param int    $id          Identifier of mediumn to show
     * @param string $source      Source of this call (contentType or scribite)
     * @param string $displayMode Display mode (link or embed)
     * @param string $zoomMode    Zoom mode (nozoom, normalzoom, innerzoom)
     * @param int    $thumbnr     Thumbnail number: 1..x (optional, default = modvar setting)
     * @return string Desired data output
     */
    public function display($args)
    {
        $getData = $this->request->getGet();
        $id = (int) (isset($args['id'])) ? $args['id'] : $getData->filter('id', null, FILTER_VALIDATE_INT);

        $source = (isset($args['source'])) ? $args['source'] : $getData->filter('source', '', FILTER_SANITIZE_STRING);
        if (!in_array($source, array('contentType', 'scribite'))) {
            $source = 'contentType';
        }

        $displayMode = (isset($args['displayMode'])) ? $args['displayMode'] : $getData->filter('displayMode', 'embed', FILTER_SANITIZE_STRING);
        if (!in_array($displayMode, array('link', 'embed'))) {
            $displayMode = 'embed';
        }

        $zoomMode = (isset($args['zoomMode'])) ? $args['zoomMode'] : $getData->filter('zoomMode', 'nozoom', FILTER_SANITIZE_STRING);
        if (!in_array($zoomMode, array('nozoom', 'normalzoom', 'innerzoom'))) {
            $zoomMode = 'nozoom';
        }

        $thumbnr = (isset($args['thumbnr'])) ? $args['thumbnr'] : FormUtil::getPassedValue('thumbnr', 0, 'GET');
        if ($thumbnr != 'original') {
            $thumbnr = (int) $thumbnr;
        }
        if ($thumbnr != 'original' && ($thumbnr == 0 || !is_numeric($thumbnr))) {
            $thumbnr = $this->getVar('defaultThumbNumber', 1);
        }
        unset($args);

        $entityClass = 'SimpleMedia_Entity_Medium';
        $repository = $this->entityManager->getRepository($entityClass);

        $objectTemp = new $entityClass(); 
        $idFields = $objectTemp->get_idFields();
        $idValues = array('id' => $id);

        $hasIdentifier = SimpleMedia_Util_Controller::isValidIdentifier($idValues);
        //$this->throwNotFoundUnless($hasIdentifier, $this->__('Error! Invalid identifier received.'));
        if (!$hasIdentifier) {
            return $this->__('Error! Invalid identifier received.');
        }

        // assign object data fetched from the database
        $objectData = null;
        $objectData = $repository->selectById($idValues);
        if ((!is_array($objectData) && !is_object($objectData)) || !isset($objectData[$idFields[0]])) {
            //$this->throwNotFound($this->__('No such item.'));
            return $this->__('No such item.');
        }

        if (!SecurityUtil::checkPermission('SimpleMedia::', $objectData['id'] . '::', ACCESS_READ)) {
            return '';
        }

        $smView = Zikula_View::getInstance('SimpleMedia', true);

        $smView->assign('source', $source)
               ->assign('medium', $objectData)
               ->assign('displayMode', $displayMode)
               ->assign('zoomMode', $zoomMode)
               ->assign('thumbnr', $thumbnr);

        return $smView->fetch('external/display.tpl');
    }

    /**
     * Popup selector for scribite plugins.
     * Finds files / items.
     *
     * @param int $did Definition id for selected module
     * @return output The external item finder page
     */
    public function findItem($args)
    {
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('SimpleMedia::', '::', ACCESS_COMMENT));
        PageUtil::addVar('stylesheet', ThemeUtil::getModuleStylesheet('SimpleMedia'));

        $smView = Zikula_View::getInstance('SimpleMedia', false);
        $smView->assign('mainCategory', ModUtil::apiFunc('SimpleMedia', 'category', 'getMainCat'));

        $objectType = 'medium';
        $entityClass = 'SimpleMedia_Entity_' . ucfirst($objectType);
        $repository = $this->entityManager->getRepository($entityClass);

        $getData = $this->request->getGet();

        $editor = (isset($args['editor']) && !empty($args['editor'])) ? $args['editor'] : $getData->filter('editor', '', FILTER_SANITIZE_STRING);
        if (empty($editor) || !in_array($editor, array('xinha', 'tinymce'/*, 'ckeditor'*/))) {
            return 'Error: Invalid editor context given for external controller action.';
        }

        $onlyImages = (isset($args['onlyimages'])) ? $args['onlyimages'] : FormUtil::getPassedValue('onlyimages', 0, 'GET');
        if ($onlyImages != 0 && $onlyImages != 1) {
            $onlyImages = 0;
        }

        $thumbnr = (isset($args['thumbnr'])) ? $args['thumbnr'] : FormUtil::getPassedValue('thumbnr', 0, 'GET');
        if ($thumbnr != 'original') {
            $thumbnr = (int) $thumbnr;
        }
        if ($thumbnr == 0 || ($thumbnr != 'original' && !is_numeric($thumbnr))) {
            $thumbnr = $this->getVar('defaultThumbNumber', 1);
        }

        $sort = (isset($args['sort']) && !empty($args['sort'])) ? $args['sort'] : $getData->filter('sort', '', FILTER_SANITIZE_STRING);
        if (empty($sort) || !in_array($sort, $repository->getAllowedSortingFields())) {
            $sort = $repository->getDefaultSortingField();
        }

        $sdir = (isset($args['sortdir']) && !empty($args['sortdir'])) ? $args['sortdir'] : $getData->filter('sortdir', '', FILTER_SANITIZE_STRING);
        $sdir = strtolower($sdir);
        if ($sdir != 'asc' && $sdir != 'desc') {
            $sdir = 'asc';
        }

        //$keyword = (isset($args['keyword'])) ? $args['keyword'] : $getData->filter('keyword', '', FILTER_SANITIZE_STRING);

        $sortParam = $sort . ' ' . $sdir;

        // the current offset which is used to calculate the pagination
        $currentPage = (int) (isset($args['pos']) && !empty($args['pos'])) ? $args['pos'] : $getData->filter('pos', 1, FILTER_VALIDATE_INT);

        // the number of items displayed on a page for pagination
        $resultsPerPage = (int) (isset($args['num']) && !empty($args['num'])) ? $args['num'] : $getData->filter('num', 0, FILTER_VALIDATE_INT);
        if ($resultsPerPage == 0) {
            $resultsPerPage = $this->getVar('pagesize', 10);
        }
$where = '';
        list($objectData, $objectCount) = $repository->selectWherePaginated($where, $sortParam, $currentPage, $resultsPerPage);

        $this->view->assign('editorName', $editor)
                   ->assign('objectData', $objectData)
                   ->assign('onlyimages', $onlyImages)
                   ->assign('thumbnr', $thumbnr)
                   ->assign('currentPage', $currentPage)
                   ->assign('pager', array('numitems'     => $objectCount,
                                           'itemsperpage' => $resultsPerPage));
        return $this->view->display('external/findItem.tpl');
    }
}
